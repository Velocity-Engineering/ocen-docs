"use strict";(self.webpackChunkocen=self.webpackChunkocen||[]).push([[5166],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),f=i,g=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return t?r.createElement(g,o(o({ref:n},l),{},{components:t})):r.createElement(g,o({ref:n},l))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},15787:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(87462),i=(t(67294),t(3905));const a={sidebar_position:6},o="JWS Examples",s={unversionedId:"components/auth_service/JwsTokenGenerationAndVerification",id:"components/auth_service/JwsTokenGenerationAndVerification",title:"JWS Examples",description:"The following Java Spring Webflux code demonstrates the ReactiveResponseSigner class, which is a decorator for ServerHttpResponse, extending its functionality.",source:"@site/docs/components/auth_service/JwsTokenGenerationAndVerification.md",sourceDirName:"components/auth_service",slug:"/components/auth_service/JwsTokenGenerationAndVerification",permalink:"/docs/components/auth_service/JwsTokenGenerationAndVerification",draft:!1,editUrl:"https://github.com/iSPIRT/OCEN-Documentation/tree/main/docs/components/auth_service/JwsTokenGenerationAndVerification.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Token Generation & Verification",permalink:"/docs/components/auth_service/token_generation"},next:{title:"Product Registry",permalink:"/docs/components/product_registry"}},c={},p=[],l={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"jws-examples"},"JWS Examples"),(0,i.kt)("h1",{id:"java-based-example-for-signing-http-responses"},"Java Based Example for Signing HTTP responses"),(0,i.kt)("p",null,"The following Java Spring Webflux code demonstrates the ReactiveResponseSigner class, which is a decorator for ServerHttpResponse, extending its functionality."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Class definition: A decorator for ServerHttpResponse\npublic class ReactiveResponseSigner extends ServerHttpResponseDecorator {\n\n    public ReactiveResponseSigner(ServerHttpResponse response) {\n        super(response);\n    }\n\n    // Override the writeWith method to sign the payload before writing the response\n    @Override\n    @Nonnull\n    public Mono<Void> writeWith(@Nonnull Publisher<? extends DataBuffer> body) {\n        // Convert the body into a Flux<DataBuffer>\n        Flux<DataBuffer> buffer = Flux.from(body);\n        // Override the writing of the body with a method that signs the payload\n        return super.writeWith(buffer.doOnNext(dataBuffer -> {\n            try (ByteArrayOutputStream stream = new ByteArrayOutputStream()) {\n                // Write the payload into the stream\n                Channels.newChannel(stream).write(dataBuffer.asByteBuffer().asReadOnlyBuffer());\n                // Sign the payload\n                String sign = sign(stream.toByteArray(), true);\n                // Set the signature in the header\n                getHeaders().set("Signature", sign);\n            } catch (Exception e) {\n                throw new IllegalStateException(e);\n            }\n        }));\n    }\n\n    // Sign the payload\n    private <T> String sign(byte[] payload, boolean detached) throws JoseException {\n        \n        JsonWebSignature signerJws = new JsonWebSignature();\n        signerJws.setPayloadBytes(payload);\n        // Specify the algorithm to be used for signing\n        signerJws.setAlgorithmHeaderValue("RS256");\n        // Retrieve the JSON Web Key to be used for signing\n        RsaJsonWebKey jwk = getJsonWebKey(); // your json web key\n        signerJws.setKey(jwk.getPrivateKey());\n        signerJws.setKeyIdHeaderValue(jwk.getKeyId());\n        // If a detached signature is requested, do not include the payload in the JWS\n        signerJws.getHeaders().setObjectHeaderValue("b64", !detached);\n        // Return the appropriate serialization based on whether a detached signature is requested\n        if (detached) {\n            return signerJws.getDetachedContentCompactSerialization();\n        } else {\n            signerJws.setCriticalHeaderNames(new String[]{"b64"});\n            return signerJws.getCompactSerialization();\n        }\n    }\n}\n')),(0,i.kt)("h1",{id:"java-based-example-for-verifying-signatures"},"Java Based Example for verifying signatures"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\npublic static void parseSignature(String detachedSignature, byte[] payload, RsaJsonWebKey jwk) throws JoseException {\n\n    JsonWebSignature verifierJws = new JsonWebSignature();\n\n    // Set the algorithm constraints for the signature verification\n    verifierJws.setAlgorithmConstraints(new AlgorithmConstraints(ConstraintType.WHITELIST, new String[]{"RS256"}));\n\n    verifierJws.setCompactSerialization(detachedSignature);\n\n    if (payload != null) {\n        payload.apply(verifierJws);\n    }\n\n    verifierJws.setKey(jwk.getPublicKey());\n\n    if (!verifierJws.verifySignature()) {\n        throw exception;\n    }\n}\n')))}d.isMDXComponent=!0}}]);